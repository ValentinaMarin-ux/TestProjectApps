package com.example.test.models;

import java.time.LocalDate;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;

@Entity // Marks this class as a JPA entity (mapped to a database table)
@Table(name = "rentals") // Specifies the table name in the database
public class Rental {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Unique identifier for the rental, auto-generated by the database

    @Column(nullable = false)
    private LocalDate rentalDate; // Date when the rental starts

    @Column(nullable = true)
    private LocalDate returnDate; // Date when the rental is returned (can be null if not returned yet)

    // Relationship with Customer (One Customer can have many Rentals)
    @ManyToOne
    @JoinColumn(name = "customer_id", nullable = false)
    private Customer customer; // The customer who rented the movie

    // Relationship with Movie (One Movie can be in many Rentals)
    @ManyToOne
    @JoinColumn(name = "movie_id", nullable = false)
    private Movie movie; // The movie that was rented

    // Relationship with Payments (One Rental can have multiple Payments)
    @OneToMany(mappedBy = "rental", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JsonIgnore // Prevents serialization of payments to avoid infinite recursion
    private List<Payment> payments; // List of payments associated with the rental

    // Relationship with Fines (One Rental can have multiple Fines)
    @OneToMany(mappedBy = "rental", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JsonIgnore // Prevents serialization of fines to avoid infinite recursion
    private List<Fine> fines; // List of fines associated with the rental

    // Default constructor (required for JPA)
    public Rental() {}

    // Constructor with parameters to initialize a Rental object
    public Rental(LocalDate rentalDate, LocalDate returnDate, Customer customer, Movie movie) {
        this.rentalDate = rentalDate;
        this.returnDate = returnDate;
        this.customer = customer;
        this.movie = movie;
    }

    // Getters and Setters (used to access and modify private fields)
    
    public Long getId() {
        return id;
    }

    public LocalDate getRentalDate() {
        return rentalDate;
    }

    public void setRentalDate(LocalDate rentalDate) {
        this.rentalDate = rentalDate;
    }

    public LocalDate getReturnDate() {
        return returnDate;
    }

    public void setReturnDate(LocalDate returnDate) {
        this.returnDate = returnDate;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public Movie getMovie() {
        return movie;
    }

    public void setMovie(Movie movie) {
        this.movie = movie;
    }

    public List<Payment> getPayments() {
        return payments;
    }

    public void setPayments(List<Payment> payments) {
        this.payments = payments;
    }

    public List<Fine> getFines() {
        return fines;
    }

    public void setFines(List<Fine> fines) {
        this.fines = fines;
    }
}
